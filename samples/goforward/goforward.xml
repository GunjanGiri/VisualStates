<?xml version="1.0" encoding="UTF-8"?>
<VisualHFSM><SubAutomata id="1" idFather="0"><state initial="true" id="1"><posx>69</posx><posy>163</posy><name>GoForward</name><idSubautomataSon>0</idSubautomataSon><code>self.KobukiMotors.sendV(0.5)
self.KobukiMotors.sendW(0.0)</code></state><state initial="false" id="2"><posx>255</posx><posy>117</posy><name>GoBack</name><idSubautomataSon>0</idSubautomataSon><code>self.KobukiMotors.sendV(-0.3)
self.KobukiMotors.sendW(0.2)</code></state><transition id="1"><posx>139</posx><posy>78</posy><origin>1</origin><destiny>2</destiny><transcode></transcode><name>transition</name><trans type="condition">self.calculate_obstacle()</trans></transition><transition id="2"><posx>189</posx><posy>196</posy><origin>2</origin><destiny>1</destiny><transcode></transcode><name>transition</name><trans type="condition">not self.calculate_obstacle()</trans></transition><iteration_time>100</iteration_time><variables></variables><functions>def calculate_obstacle(self):
	self.laserData = self.KobukiLaser.getLaserData()
	min_dist = 1000
	for i in range(len(self.laserData.values)):
		if self.laserData.values[i] &lt; min_dist:
			min_dist = self.laserData.values[i]

	if min_dist &lt; 1.0:
		return True
	else:
		return False

</functions></SubAutomata><libraries/><config><iceinterface><nameinterface>KobukiMotors</nameinterface><nameproxy>Motors</nameproxy><ip>localhost</ip><port>9001</port><interface>Motors</interface></iceinterface><iceinterface><nameinterface>KobukiLaser</nameinterface><nameproxy>Laser</nameproxy><ip>localhost</ip><port>9001</port><interface>Laser</interface></iceinterface></config></VisualHFSM>
